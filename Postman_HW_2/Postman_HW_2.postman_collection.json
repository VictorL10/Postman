{
	"info": {
		"_postman_id": "1938dad5-8033-4320-ae1a-508ad46383a4",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28646350"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1.Отправить запрос\r",
							"//2.статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string\r",
							"let BodyStr = pm.response.text();  \r",
							"console.log(BodyStr);\r",
							"\r",
							"pm.test(\"In body the correct string\", function () {\r",
							"pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlG}}/first",
					"host": [
						"{{urlG}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1.Отправить запрос\r",
							"/// 2.Статус код 200\r",
							"        pm.test(\"Статус код 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        });  \r",
							"\r",
							"\r",
							"///3.Спарсить response body в json\r",
							"        pm.test(\"RespBody\", function () {\r",
							"        let jsonData = JSON.parse(responseBody);\r",
							"        //let jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.value).to.eql();\r",
							"        });\r",
							"//console.log (pm.response.json())\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"///4.Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"        pm.test (\"RespName1\", function (){ \r",
							"        let responseJson = pm.response.json();\r",
							"        pm.expect(responseJson.name).to.eql(\"Victor\");\r",
							"        });\r",
							"//console.log (pm.response.json().name)\r",
							"\r",
							"\r",
							"///5.Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"        pm.test (\"RespAge1\", function (){ \r",
							"        let responseJson = pm.response.json();\r",
							"        pm.expect(responseJson.age).to.eql(\"32\");\r",
							"        });\r",
							"//console.log (pm.response.json().age)\r",
							"\r",
							"\r",
							"///6.Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"        pm.test (\"RespSalary1\", function (){ \r",
							"        let responseJson = pm.response.json();\r",
							"        pm.expect(responseJson.salary).to.eql(1000);\r",
							"        });\r",
							"//console.log (pm.response.json().salary)\r",
							"\r",
							"\r",
							"//7.Спарсить request.\r",
							"    let RequestData = request.data;\r",
							"    //console.log (request.data);\r",
							"  \r",
							"\r",
							"///8.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"        pm.test (\"RespName\", function (){ \r",
							"        let RespName = pm.response.json() \r",
							"        pm.expect(RespName.name).to.eql(RequestData.name);\r",
							"        });\r",
							"//console.log(RequestData.name)\r",
							"\r",
							"\r",
							"///9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"    pm.test (\"RespAge\", function (){ \r",
							"    pm.expect(RequestData.age).to.eql(RequestData.age);\r",
							"    });\r",
							"//console.log(RequestData.age)\r",
							"\r",
							"\r",
							"///10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"    pm.test(\"RespSalary\", function(){\r",
							"    pm.expect(RequestData.salary).to.eql(RequestData.salary);    \r",
							"    })\r",
							"//console.log(RequestData.salary)\r",
							"\r",
							"///11. Вывести в консоль параметр family из response.\r",
							"    let RespLog = pm.response.json();\r",
							"    console.log(RespLog.family);\r",
							"\r",
							"    //let body = JSON.parse(responseBody);\r",
							"    //console.log(JSON.stringify(body.family));\r",
							"\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"    let resp = pm.response.json();\r",
							"    pm.test(\" u_salary_1_5_year в ответе равно salary*4 \", function(){\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(RequestData.salary*4);    \r",
							"    })\r",
							"\r",
							"//console.log(RequestData.salary)\r",
							"//console.log(resp.family.u_salary_1_5_year)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"   \r",
							"\r",
							"    \r",
							"\r",
							"    \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Victor",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "aus",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{urlG}}/user_info_3",
					"host": [
						"{{urlG}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1.Отправить запрос\r",
							"/// 2.Статус код 200\r",
							"        pm.test(\"Статус код 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        });  \r",
							"\r",
							"\r",
							"///3.Спарсить response body в json\r",
							"        pm.test(\"Parse Response Body\", function () {\r",
							"        let jsonData = JSON.parse(responseBody);\r",
							"        pm.expect(jsonData.value).to.eql();\r",
							"        });\r",
							"//console.log (pm.response.json())\r",
							"\r",
							"\r",
							"//4.Спарсить request.\r",
							"    let RequestData = pm.request.url.query.toObject();\r",
							"//console.log (pm.request.url.query.toObject());\r",
							"  \r",
							"\r",
							"///5.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"        pm.test (\"Rquest Name\", function (){ \r",
							"        let RespName = pm.response.json() \r",
							"        pm.expect(RespName.name).to.eql(RequestData.name);\r",
							"        });\r",
							"//console.log(RequestData.name)\r",
							"//console.log(pm.response.json().name)\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test (\"Request Age\", function (){ \r",
							"        let RespAge = pm.response.json() \r",
							"        pm.expect(RespAge.age).to.eql(RequestData.age);\r",
							"        });\r",
							"//console.log(RequestData.age)\r",
							"//console.log(pm.response.json().age)\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test (\"Request Salary\", function (){ \r",
							"        let RespSalary = pm.response.json() \r",
							"        pm.expect(RespSalary.salary).to.eql(+RequestData.salary);\r",
							"        });\r",
							"//console.log(RequestData.salary)\r",
							"//console.log(pm.response.json().salary)\r",
							"\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"   let RespLog = pm.response.json();\r",
							"   console.log(RespLog.family);\r",
							"\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"     pm.test(\"heck that the dog parameter has name parameters\", function () {\r",
							"    let resp = pm.response.json();\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//console.log(pm.response.json().family.pets.dog.name);\r",
							"\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"     pm.test(\"the dog parameter has age parameters\", function () {\r",
							"    let resp = pm.response.json();\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//console.log(pm.response.json().family.pets.dog.age);\r",
							"\r",
							"\r",
							"//11.Проверить, что параметр name имеет значение Luky.\r",
							"     pm.test(\"the name parameter is set to Luky\", function () {\r",
							"    let resp = pm.response.json();\r",
							"    pm.expect(resp.family.pets.dog.name).to.have.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"     pm.test(\"the age parameter is 4\", function () {\r",
							"    let resp = pm.response.json();\r",
							"    pm.expect(resp.family.pets.dog.age).to.have.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "32",
							"type": "text",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Victor",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						},
						{
							"key": "aus",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{urlG}}/object_info_3?age=32&name=Victor&salary=1000",
					"host": [
						"{{urlG}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "name",
							"value": "Victor"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1.Отправить запрос\r",
							"/// 2.Статус код 200\r",
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"///3.Спарсить response body в json\r",
							"pm.test(\"Parse Response Body\", function () {\r",
							"    let jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(jsonData.value).to.eql();\r",
							"});\r",
							"//console.log (pm.response.json())\r",
							"\r",
							"\r",
							"//4.Спарсить request.\r",
							"let RequestData = pm.request.url.query.toObject();\r",
							"//console.log (pm.request.url.query.toObject());\r",
							"\r",
							"\r",
							"//5.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Rquest Name\", function () {\r",
							"    let RespName = pm.response.json()\r",
							"    pm.expect(RespName.name).to.eql(RequestData.name);\r",
							"});\r",
							"//console.log(RequestData.name)\r",
							"//console.log(pm.response.json().name)\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Request Age\", function () {\r",
							"    let RespAge = pm.response.json()\r",
							"    pm.expect(RespAge.age).to.eql(+RequestData.age);\r",
							"});\r",
							"//console.log(RequestData.age)\r",
							"//console.log(pm.response.json().age)\r",
							"\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"let RequestSalary = pm.request.url.query.toObject();\r",
							"//console.log(+RequestSalary.salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let ResponseSalary = pm.response.json();\r",
							"//console.log(ResponseSalary.salary);\r",
							"\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let ResponseSalary_0 = pm.response.json();\r",
							"    //console.log(\"response salary = \" + ResponseSalary_0.salary[0]);\r",
							"\r",
							"\r",
							"//10. Вывести в консоль 1 - й элемент параметра salary параметр salary из response.\r",
							"let ResponseSalary_1 = pm.response.json();\r",
							"    //console.log(\"response salary = \" + ResponseSalary_1.salary[1]);\r",
							"\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let ResponseSalary_2 = pm.response.json();\r",
							"    //console.log(\"response salary = \" + ResponseSalary_2.salary[2]);\r",
							"\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"The 0th element of the salary parameter is equal to the salary from request\", function () {\r",
							"    let Request_0_Salary = pm.response.json()\r",
							"        pm.expect(Request_0_Salary.salary[0]).to.eql(+RequestData.salary);\r",
							"});\r",
							"//console.log(+RequestData.salary)\r",
							"//console.log(pm.response.json().salary[0])\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "32",
							"type": "text",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Victor",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						},
						{
							"key": "aus",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{urlG}}/object_info_4?age=32&name=Victor&salary=1000",
					"host": [
						"{{urlG}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "name",
							"value": "Victor"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		}
	]
}