{
	"info": {
		"_postman_id": "1938dad5-8033-4320-ae1a-508ad46383a4",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28646350"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1.Отправить запрос\r",
							"//2.статус код 200\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string\r",
							"    let BodyStr = pm.response.text();  \r",
							"    console.log(BodyStr);\r",
							"\r",
							"    pm.test(\"In body the correct string\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"    });\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1.Отправить запрос\r",
							"//2.Статус код 200\r",
							"    pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    });  \r",
							"\r",
							"\r",
							"\r",
							"///3.Спарсить response body в json\r",
							"    pm.test(\"Parse response body to json\", function () {\r",
							"    let jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(jsonData.value).to.eql();\r",
							"    });\r",
							"    //console.log (pm.response.json())\r",
							"\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"///4.Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"    pm.test (\"name in response = name from request (type in the name with your hands)\", function (){ \r",
							"    pm.expect(responseJson.name).to.eql(\"Victor\");\r",
							"    });\r",
							"    //console.log (pm.response.json().name)\r",
							"\r",
							"\r",
							"\r",
							"///5.Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"    pm.test (\"age in response = age from request (type in the age with your hands.)\", function (){ \r",
							"    pm.expect(responseJson.age).to.eql(\"32\");\r",
							"    });\r",
							"    //console.log (pm.response.json().age)\r",
							"\r",
							"\r",
							"\r",
							"///6.Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"    pm.test (\"salary in response = salary from request (type in the salary with your hands.\", function (){ \r",
							"    pm.expect(responseJson.salary).to.eql(1000);\r",
							"    });\r",
							"    //console.log (pm.response.json().salary)\r",
							"\r",
							"\r",
							"\r",
							"//7.Спарсить request.\r",
							"    let RequestData = request.data;\r",
							"    //console.log (request.data);\r",
							"  \r",
							"\r",
							"\r",
							"///8.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.test (\"name in response = name from request (pick name from request.)\", function (){ \r",
							"    let RespName = pm.response.json();\r",
							"    pm.expect(RespName.name).to.eql(RequestData.name);\r",
							"    });\r",
							"    //console.log(RequestData.name)\r",
							"    //console.log(pm.response.json().name)\r",
							"\r",
							"\r",
							"\r",
							"///9.Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"    pm.test (\"age in response = age from request (pick age from request.\", function (){ \r",
							"    let RespAge = pm.response.json();\r",
							"    pm.expect(RespAge.age).to.eql(RequestData.age);\r",
							"    });\r",
							"    //console.log(RequestData.age)\r",
							"    //console.log(pm.response.json().age)\r",
							"\r",
							"\r",
							"\r",
							"///10.Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"    pm.test(\"salary in response = salary from request (pick salary from request.\", function(){\r",
							"    let RespSalary = pm.response.json();\r",
							"    pm.expect(RespSalary.salary).to.eql(+RequestData.salary);    \r",
							"    })\r",
							"    //console.log(+RequestData.salary)\r",
							"    //console.log(pm.response.json().salary)\r",
							"\r",
							"\r",
							"\r",
							"///11.Вывести в консоль параметр family из response.\r",
							"    let RespLog = pm.response.json();\r",
							"    console.log(RespLog.family);\r",
							"\r",
							"    //let body = JSON.parse(responseBody);\r",
							"    //console.log(JSON.stringify(body.family));\r",
							"\r",
							"\r",
							"\r",
							"//12.Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"    let RespSalary = pm.response.json();\r",
							"    pm.test(\" u_salary_1_5_year in response = salary*4 \", function(){\r",
							"    pm.expect(RespSalary.family.u_salary_1_5_year).to.eql(RequestData.salary*4);    \r",
							"    })\r",
							"    //console.log(RequestData.salary)\r",
							"    //console.log(resp.family.u_salary_1_5_year)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"   \r",
							"\r",
							"    \r",
							"\r",
							"    \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Victor",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "aus",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1.Отправить запрос\r",
							"//2.Статус код 200\r",
							"    pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    });  \r",
							"\r",
							"\r",
							"\r",
							"///3.Спарсить response body в json\r",
							"    pm.test(\"Parse Response Body\", function () {\r",
							"    let jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(jsonData.value).to.eql();\r",
							"    });\r",
							"    //console.log (pm.response.json())\r",
							"\r",
							"\r",
							"\r",
							"//4.Спарсить request.\r",
							"    let RequestData = pm.request.url.query.toObject();\r",
							"    //console.log (pm.request.url.query.toObject());\r",
							"  \r",
							"\r",
							"\r",
							"///5.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.test (\"name in response = name from request (pick name from request.)\", function (){ \r",
							"    let RespName = pm.response.json() \r",
							"    pm.expect(RespName.name).to.eql(RequestData.name);\r",
							"    });\r",
							"    //console.log(RequestData.name)\r",
							"    //console.log(pm.response.json().name)\r",
							"\r",
							"\r",
							"\r",
							"//6.Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"    pm.test (\"age in response = age from request (pick age from request.)\", function (){ \r",
							"    let RespAge = pm.response.json() \r",
							"    pm.expect(RespAge.age).to.eql(RequestData.age);\r",
							"    });\r",
							"    //console.log(RequestData.age)\r",
							"    //console.log(pm.response.json().age)\r",
							"\r",
							"\r",
							"\r",
							"//7.Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"    pm.test (\"salary in response = name from salary (pick salary from request.)\", function (){ \r",
							"    let RespSalary = pm.response.json() \r",
							"    pm.expect(RespSalary.salary).to.eql(+RequestData.salary);\r",
							"    });\r",
							"    //console.log(RequestData.salary)\r",
							"    //console.log(pm.response.json().salary)\r",
							"\r",
							"\r",
							"\r",
							"//8.Вывести в консоль параметр family из response.\r",
							"    let ReqLog = pm.response.json();\r",
							"    console.log(ReqLog.family);\r",
							"\r",
							"\r",
							"\r",
							"//9.Проверить, что у параметра dog есть параметры name.\r",
							"    pm.test(\"the dog parameter has name parameters\", function () {\r",
							"    let ReqDog = pm.response.json();\r",
							"    pm.expect(ReqDog.family.pets.dog).to.have.property(\"name\");\r",
							"    });\r",
							"    //console.log(pm.response.json().family.pets.dog.name);\r",
							"\r",
							"\r",
							"\r",
							"//10.Проверить, что у параметра dog есть параметры age.\r",
							"    pm.test(\"the dog parameter has age parameters\", function () {\r",
							"    let ReqDog = pm.response.json();\r",
							"    pm.expect(ReqDog.family.pets.dog).to.have.property(\"age\");\r",
							"    });\r",
							"    //console.log(pm.response.json().family.pets.dog.age);\r",
							"\r",
							"\r",
							"\r",
							"//11.Проверить, что параметр name имеет значение Luky.\r",
							"     pm.test(\"the name parameter is set to Luky\", function () {\r",
							"    let ReqLuky = pm.response.json();\r",
							"    pm.expect(ReqLuky.family.pets.dog.name).to.have.eql(\"Luky\");\r",
							"    });\r",
							"\r",
							"\r",
							"\r",
							"// 12.Проверить, что параметр age имеет значение 4.\r",
							"    pm.test(\"the age parameter is 4\", function () {\r",
							"    let reqAge = pm.response.json();\r",
							"    pm.expect(reqAge.family.pets.dog.age).to.have.eql(4);\r",
							"    });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "32",
							"type": "text",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Victor",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						},
						{
							"key": "aus",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_3?age=32&name=Victor&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "name",
							"value": "Victor"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1.Отправить запрос\r",
							"//2.Статус код 200\r",
							"    pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"let RespAge = pm.response.json()\r",
							"let RespName = pm.response.json()\r",
							"\r",
							"\r",
							"\r",
							"///3.Спарсить response body в json\r",
							"    pm.test(\"Parse Response Body\", function () {\r",
							"    let jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(jsonData.value).to.eql();\r",
							"    });\r",
							"    //console.log (pm.response.json())\r",
							"\r",
							"\r",
							"\r",
							"//4.Спарсить request.\r",
							"let RequestData = pm.request.url.query.toObject();\r",
							"//console.log (pm.request.url.query.toObject());\r",
							"\r",
							"\r",
							"\r",
							"//5.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.test(\"name in response is equal to name from request\", function () {\r",
							"    pm.expect(RespName.name).to.eql(RequestData.name);\r",
							"    });\r",
							"    //console.log(RequestData.name)\r",
							"    //console.log(pm.response.json().name)\r",
							"\r",
							"\r",
							"\r",
							"//6.Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"    pm.test(\"age in response is equal to age from request\", function () {\r",
							"    pm.expect(RespAge.age).to.eql(+RequestData.age);\r",
							"    });\r",
							"    //console.log(RequestData.age)\r",
							"    //console.log(pm.response.json().age)\r",
							"\r",
							"\r",
							"\r",
							"//7.Вывести в консоль параметр salary из request.\r",
							"    let RequestSalary = pm.request.url.query.toObject();\r",
							"    //console.log(+RequestSalary.salary);\r",
							"\r",
							"\r",
							"\r",
							"//8.Вывести в консоль параметр salary из response.\r",
							"    let ResponseSalary = pm.response.json();\r",
							"    //console.log(ResponseSalary.salary);\r",
							"\r",
							"\r",
							"\r",
							"//9.Вывести в консоль 0-й элемент параметра salary из response.\r",
							"    let ResponseSalary_0 = pm.response.json();\r",
							"    //console.log(\"response salary = \" + ResponseSalary_0.salary[0]);\r",
							"\r",
							"\r",
							"\r",
							"//10.Вывести в консоль 1 - й элемент параметра salary параметр salary из response.\r",
							"    let ResponseSalary_1 = pm.response.json();\r",
							"    //console.log(\"response salary = \" + ResponseSalary_1.salary[1]);\r",
							"\r",
							"\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"    let ResponseSalary_2 = pm.response.json();\r",
							"    //console.log(\"response salary = \" + ResponseSalary_2.salary[2]);\r",
							"\r",
							"\r",
							"\r",
							"//12.Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"    pm.test(\"The 0th element of the salary parameter = salary from request\", function () {\r",
							"    let Request_0_Salary = pm.response.json()\r",
							"    pm.expect(Request_0_Salary.salary[0]).to.eql(+RequestData.salary);\r",
							"    });\r",
							"    //console.log(+RequestData.salary)\r",
							"    //console.log(pm.response.json().salary[0])\r",
							"\r",
							"\r",
							"\r",
							"//13.Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"    pm.test (\"The 1st element of the salary parameter = salary*2 in request\", function(){\r",
							"    let Requst_1x2_Salary = pm.response.json()\r",
							"    pm.expect (+Requst_1x2_Salary.salary[1]).to.eql(RequestData.salary*2); \r",
							"    });\r",
							"    //console.log(RequestData.salary*2)\r",
							"    //console.log(+pm.response.json().salary[1])\r",
							"\r",
							"\r",
							"\r",
							"//14.Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"    pm.test (\"The 2nd element of the salary parameter = salary*3 in request\", function(){\r",
							"    let Requst_2x3_Salary = pm.response.json()\r",
							"    pm.expect (+Requst_2x3_Salary.salary[2]).to.eql(RequestData.salary*3); \r",
							"    });\r",
							"    //console.log(RequestData.salary*3)\r",
							"    //console.log(+pm.response.json().salary[2])\r",
							"\r",
							"\r",
							"\r",
							"//15.Создать в окружении переменную name\r",
							"//18.Передать в окружение переменную name\r",
							"    pm.environment.set('name' , RespName.name);\r",
							"\r",
							"\r",
							"\r",
							"//16.Создать в окружении переменную age\r",
							"//19.Передать в окружение переменную age\r",
							"    pm.environment.set('age' , RespAge.age);\r",
							"\r",
							"\r",
							"\r",
							"//17.Создать в окружении переменную salary\r",
							"//20.Передать в окружение переменную salary\r",
							"    pm.environment.set('salary' , RespName.salary[0]);\r",
							"\r",
							"\r",
							"\r",
							"//21.Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"    let TestSalary1 = pm.response.json().salary\r",
							"    for( let i = 0; i < 3; i++ ) {\r",
							"    console.log(TestSalary1[i]);\r",
							"    };\r",
							"\r",
							"\r",
							"// 2-ой вариант \r",
							"    let TestSalary = pm.response.json().salary\r",
							"    for( let i = 0; i <1 ; i++  ) {\r",
							"    console.log(TestSalary);\r",
							"    };\r",
							"\r",
							"\r",
							"// 3-ий вариант \r",
							"    for (i in TestSalary) {\r",
							"    console.log(\"Key \" + i, \"value \" + TestSalary[i]);\r",
							"    };"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "32",
							"type": "text",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Victor",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						},
						{
							"key": "aus",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_4?age=32&name=Victor&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "name",
							"value": "Victor"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1.Вставить параметр salary из окружения в request \r",
							"    //{{salary}}\r",
							"\r",
							"\r",
							"\r",
							"//2.Вставить параметр age из окружения в age \r",
							"    //{{age}}\r",
							"\r",
							"\r",
							"\r",
							"//3.Вставить параметр name из окружения в name\r",
							"    //{{name}}\r",
							"\r",
							"\r",
							"let resp = pm.response.json();\r",
							"\r",
							"\r",
							"\r",
							"//4.Отправить запрос.\r",
							"//5.Статус код 200\r",
							"    pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"\r",
							"\r",
							"//6.Спарсить response body в json.\r",
							"    pm.test(\"Parse Response Body\", function () {\r",
							"    let jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(jsonData.value).to.eql();\r",
							"    });\r",
							"    //console.log (pm.response.json())\r",
							"\r",
							"\r",
							"\r",
							"//7.Спарсить request.\r",
							"    let req = request.data\r",
							"    //console.log (req);\r",
							"\r",
							"\r",
							"\r",
							"//8.Проверить, что json response имеет параметр start_qa_salary\r",
							"    pm.test(\"json response has start_qa_salary parameter\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"    });\r",
							"    //console.log(resp.start_qa_salary);\r",
							"\r",
							"\r",
							"\r",
							"//9.Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"    pm.test(\"json response has qa_salary_after_6_months parameter\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"    });\r",
							"    //console.log(resp.qa_salary_after_6_months);\r",
							"\r",
							"\r",
							"\r",
							"//10.Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"    pm.test(\"json response has parameter qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"    });\r",
							"    //console.log(resp.qa_salary_after_12_months);\r",
							"\r",
							"\r",
							"\r",
							"//11.Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"    pm.test(\"json response has parameter qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"    });\r",
							"    //console.log(resp[\"qa_salary_after_1.5_year\"]);\r",
							"\r",
							"\r",
							"\r",
							"//12.Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"    pm.test(\"json response has parameter qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"    });\r",
							"    //console.log(resp[\"qa_salary_after_3.5_years\"]);\r",
							"\r",
							"\r",
							"\r",
							"//13.Проверить, что json response имеет параметр person\r",
							"    pm.test(\"json response has a person parameter\", function () {\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"    });\r",
							"    //console.log(resp.person);\r",
							"\r",
							"\r",
							"\r",
							"//14.Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"    pm.test(\"start_qa_salary = salary from request\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(+request.data.salary);\r",
							"    });\r",
							"    //console.log(resp.start_qa_salary)\r",
							"    //console.log(+request.data.salary)\r",
							"\r",
							"\r",
							"//15.Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"     pm.test(\"qa_salary_after_6_months = salary*2 from request\", function () {\r",
							"     pm.expect(resp.qa_salary_after_6_months).to.eql(request.data.salary*2);\r",
							"     });\r",
							"     //console.log(resp.qa_salary_after_6_months)\r",
							"     //console.log(request.data.salary*2)\r",
							"\r",
							"\r",
							"\r",
							"//16.Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"     pm.test(\"qa_salary_after_12_months = salary*2.7 from request\", function () {\r",
							"     pm.expect(resp.qa_salary_after_12_months).to.eql(request.data.salary*2.7);\r",
							"     });\r",
							"     //console.log(resp.qa_salary_after_12_months)\r",
							"     //console.log(request.data.salary*2.7)\r",
							"\r",
							"\r",
							"\r",
							"//17.Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"     pm.test(\"qa_salary_after_1.5_year = salary*3.3 from request\", function () {\r",
							"     pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(request.data.salary*3.3);\r",
							"     });\r",
							"     //console.log(resp[\"qa_salary_after_1.5_year\"])\r",
							"     //console.log(request.data.salary*3.3)\r",
							"\r",
							"\r",
							"\r",
							"//18.Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"     pm.test(\"qa_salary_after_3.5_years = salary*3.8 from request\", function () {\r",
							"     pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(request.data.salary*3.8);\r",
							"     });\r",
							"     //console.log(resp[\"qa_salary_after_3.5_years\"])\r",
							"     //console.log(request.data.salary*3.8)\r",
							"\r",
							"\r",
							"\r",
							"//19.Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"    pm.test(\"In the person parameter, 1st element from u_name = salary from request \", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+request.data.salary);\r",
							"    });\r",
							"    //console.log(resp.person.u_name[1])\r",
							"    //console.log(+request.data.salary)\r",
							"\r",
							"\r",
							"\r",
							"//20.Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"    pm.test(\"parameter u_age = age from request \", function () {\r",
							"    pm.expect(resp.person.u_age).to.eql(+request.data.age);\r",
							"    }); \r",
							"    //console.log(resp.person.u_age)\r",
							"    //console.log(+request.data.age)\r",
							"\r",
							"\r",
							"\r",
							"//21.Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"    pm.test(\"parameter u_salary_5_years = salary*4.2 from request \", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(request.data.salary*4.2);\r",
							"    }); \r",
							"    //console.log(resp.person.u_salary_5_years)\r",
							"    //console.log(request.data.salary*4.2)\r",
							"\r",
							"\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"    let TestPerson = pm.response.json().person\r",
							"\r",
							"    for( let i = 0; i < 1 ; i++  ) {\r",
							"    console.log(TestPerson);\r",
							"    };\r",
							"\r",
							"\r",
							"// 2-ой вариант\r",
							"    for (key in TestPerson) {\r",
							"    console.log(key,TestPerson[key]);\r",
							"    }\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "age",
							"value": "32",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Victor",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}